# -*- coding: utf-8 -*-
"""Mineração de dados - ataque cardiaco

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13lYQN6Vrdjnld2YE6RUpgcg8f2wBeKoE
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import cross_val_score

from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier

df = pd.read_csv('heart.csv')
# df['sexo'] = df['sexo'].replace([1,0], ['homem', 'mulher'])
# df['tipo_dor_peitoral'] = df['tipo_dor_peitoral'].replace([0,1,2,3], ['angina tipica', 'angina atipica', 'dor nao anginosa', 'assintomatico'])
# df['glicose'] = df['glicose'].replace([0,1], ['acima 120 mg/dl', 'abaixo 120 mg/dl'])
# df['dor_exercitar'] = df['dor_exercitar'].replace([0,1], ['nao', 'sim'])
# df['eletrocardiograma'] = df['eletrocardiograma'].replace([0,1,2], ['normal', 'anormal', 'hipertrofia ventricular'])
# df['variacao_pico_segmento_exercicio'] = df['variacao_pico_segmento_exercicio'].replace([0,1,2], ['sem inclinacao', 'plano', 'descida'])
# df['talassemia'] = df['talassemia'].replace([0,1,2,3], ['nulo', 'defeito corrigido', 'normal', 'defeito reversivel'])
# df['output'] = df['output'].replace([0,1], ['menor chance de doenca cardiaca', 'maior chance de doenca cardiaca'])

df.head()

scaler = StandardScaler()
df['pressao_sanguinea_repouso'] = scaler.fit_transform(df[['pressao_sanguinea_repouso']])  
df['maior_batimento_cardiaco'] = scaler.fit_transform(df[['maior_batimento_cardiaco']]) 
df['depressao_exercicio_repouso'] = scaler.fit_transform(df[['depressao_exercicio_repouso']]) 
df['veias_principais'] = scaler.fit_transform(df[['veias_principais']])
df['idade'] = scaler.fit_transform(df[['idade']])
df['colesterol'] = scaler.fit_transform(df[['colesterol']])

print(df.head())

print(df.info())

print(df.describe())

print(df.isnull().sum())
df = df.dropna()

X = df.drop('output', axis=1)
y = df['output']

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.99, random_state=42)

# Naive Bayes
gnb = GaussianNB()

# gnb.fit(X_train, y_train)
gnb.fit(X, y)

y_pred = gnb.predict(X)

print('Acuracia do modelo: ', gnb.score(X, y))

scores = cross_val_score(gnb, X, y, cv=10)

print('Acuracia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

# Random Forest
rfc = RandomForestClassifier(n_estimators=100)

rfc.fit(X, y)

y_pred = rfc.predict(X)

print('Acuracia do modelo: ', rfc.score(X, y))

scores = cross_val_score(rfc, X, y, cv=10)

print('Acuracia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

milena = [24.0,0.0,3.0,145.0,40.0,0.0,0.0,120.0,0.0,2.3,0.0,1.0,0.0]
milena = np.array(milena).reshape(1,-1)
y_pred = rfc.predict(milena)
print(y_pred)

ericles = [21.0,1.0,3.0,145.0,120.0,0.0,0.0,160.0,0.0,2.3,0.0,2.0,0.0]
ericles = np.array(ericles).reshape(1,-1)
y_pred = rfc.predict(ericles)
print(y_pred)
