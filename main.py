# -*- coding: utf-8 -*-
"""Mineração de dados - ataque cardiaco

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13lYQN6Vrdjnld2YE6RUpgcg8f2wBeKoE

# Importação das libs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn import tree

from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import cross_val_score

from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier

"""# Importação da base"""

df = pd.read_csv('heart.csv')

"""# Apresentando informações da base"""

print(df.head())

print(df.info())

print(df.describe())

df.describe().T

"""# Tratando os dados"""

# df['sexo'] = df['sexo'].replace([1,0], ['homem', 'mulher'])
# df['tipo_dor_peitoral'] = df['tipo_dor_peitoral'].replace([0,1,2,3], ['angina tipica', 'angina atipica', 'dor nao anginosa', 'assintomatico'])
# df['glicose'] = df['glicose'].replace([0,1], ['acima 120 mg/dl', 'abaixo 120 mg/dl'])
# df['dor_exercitar'] = df['dor_exercitar'].replace([0,1], ['nao', 'sim'])
# df['eletrocardiograma'] = df['eletrocardiograma'].replace([0,1,2], ['normal', 'anormal', 'hipertrofia ventricular'])
# df['variacao_pico_segmento_exercicio'] = df['variacao_pico_segmento_exercicio'].replace([0,1,2], ['sem inclinacao', 'plano', 'descida'])
# df['talassemia'] = df['talassemia'].replace([0,1,2,3], ['nulo', 'defeito corrigido', 'normal', 'defeito reversivel'])
# df['output'] = df['output'].replace([0,1], ['menor chance de doenca cardiaca', 'maior chance de doenca cardiaca'])

scaler = StandardScaler()
df['pressao_sanguinea_repouso'] = scaler.fit_transform(df[['pressao_sanguinea_repouso']])  
df['maior_batimento_cardiaco'] = scaler.fit_transform(df[['maior_batimento_cardiaco']]) 
df['depressao_exercicio_repouso'] = scaler.fit_transform(df[['depressao_exercicio_repouso']]) 
df['veias_principais'] = scaler.fit_transform(df[['veias_principais']])
df['idade'] = scaler.fit_transform(df[['idade']])
df['colesterol'] = scaler.fit_transform(df[['colesterol']])   

df = df.dropna()

"""# Apresentar a correlação entre os atributos





"""

plt.figure(figsize=(12,6))
cor = df.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)
plt.show()

"""# Separando a classe da base para treinamento"""

X = df.drop('output', axis=1)
y = df['output']

"""# Naive Bayes

Acurácia
"""

gnb = GaussianNB()

gnb.fit(X, y)

y_pred = gnb.predict(X)

print('Acurácia do modelo: ', gnb.score(X, y))

"""Precisão - Recall - F1 - Suporte"""

scores = cross_val_score(gnb, X, y, cv=10)

print('Acurácia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

"""# Random Forest

Acurácia
"""

rfc = RandomForestClassifier(n_estimators=100)

rfc.fit(X, y)

y_pred = rfc.predict(X)

print('Acurácia do modelo: ', rfc.score(X, y))

"""Precisão - Recall - F1 - Suporte"""

scores = cross_val_score(rfc, X, y, cv=10)

print('Acurácia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

"""# Decision Tree Classifier

Acurácia
"""

# Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier

dtc = DecisionTreeClassifier()

dtc.fit(X, y)

y_pred = dtc.predict(X)

print('Acurácia do modelo: ', dtc.score(X, y))

"""Precisão - Recall - F1 - Suporte"""

scores = cross_val_score(dtc, X, y, cv=10)

print('Acurácia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

"""Desenhando 3 níveis da árvore"""

tree.plot_tree(dtc, max_depth=2, filled=True, fontsize=6, feature_names=X.columns, class_names=['0', '1'])

"""Importância dos atributos"""

importance = dtc.feature_importances_
for i,v in enumerate(importance):
    print('%s: %.5f' % (df.columns[i],v))

"""# Gradient Boosting Classifier

Acurácia
"""

gbc = GradientBoostingClassifier()

gbc.fit(X, y)

y_pred = gbc.predict(X)

print('Acuracia do modelo: ', gbc.score(X, y))

"""Precisão - Recall - F1 - Suporte"""

scores = cross_val_score(gbc, X, y, cv=10)

print('Acuracia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

"""# ADA Boost Classifier

Acurácia
"""

abc = AdaBoostClassifier(n_estimators=100)

abc.fit(X, y)

y_pred = abc.predict(X)

print('Acuracia do modelo: ', abc.score(X, y))

"""Precisão - Recall - F1 - Suporte"""

scores = cross_val_score(abc, X, y, cv=10)

print('Acuracia do modelo: ', scores.mean())
print(classification_report(y, y_pred))
print(confusion_matrix(y, y_pred))

"""# Testando Input com o algoritmo ADA"""

idade = 24
sexo = 0.0
tipo_dor_peitoral = 3.0
pressao_sanguinea_repouso = 145.0
colesterol = 40.0
glicose = 0.0
dor_exercitar = 0.0
eletrocardiograma = 120.0
maior_batimento_cardiaco = 0.0
variacao_pico_segmento_exercicio = 2.3
depressao_exercicio_repouso = 0.0
veias_principais = 1.0
talassemia = 0.0


milena = [idade, sexo, tipo_dor_peitoral, pressao_sanguinea_repouso, colesterol, glicose, dor_exercitar, eletrocardiograma, maior_batimento_cardiaco, variacao_pico_segmento_exercicio, depressao_exercicio_repouso, veias_principais, talassemia]
milena = np.array(milena).reshape(1,-1)

y_pred = abc.predict(milena)
print(y_pred)

idade = 21
sexo = 1.0
tipo_dor_peitoral = 3.0
pressao_sanguinea_repouso = 145.0
colesterol = 120.0
glicose = 0.0
dor_exercitar = 0.0
eletrocardiograma = 160.0
maior_batimento_cardiaco = 0.0
variacao_pico_segmento_exercicio = 2.3
depressao_exercicio_repouso = 0.0
veias_principais = 2.0
talassemia = 0.0

ericles = [idade, sexo, tipo_dor_peitoral, pressao_sanguinea_repouso, colesterol, glicose, dor_exercitar, eletrocardiograma, maior_batimento_cardiaco, variacao_pico_segmento_exercicio, depressao_exercicio_repouso, veias_principais, talassemia]

ericles = np.array(ericles).reshape(1,-1)

y_pred = abc.predict(ericles)
print(y_pred)